var documenterSearchIndex = {"docs":
[{"location":"references.html#References","page":"References","title":"References","text":"","category":"section"},{"location":"references.html#Constrained-cubic-splines","page":"References","title":"Constrained cubic splines","text":"","category":"section"},{"location":"references.html","page":"References","title":"References","text":"Hermite interpolation with automatic derivative calculation to prevent overshooting.","category":"page"},{"location":"references.html","page":"References","title":"References","text":"C.J.C. Kruger. Constrained Cubic Spline Interpolation for Chemical Engineering Applications, 2002","category":"page"},{"location":"about.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"about.html","page":"Introduction","title":"Introduction","text":"The package SSpline provides a fast, comprehensive and specific set of spline tools. The toolset is specifically desinged for creation of splines, interpolation and extrapolation methods for computations in a spectral context.","category":"page"},{"location":"about.html","page":"Introduction","title":"Introduction","text":"SSpline is roughly twice as fast as Interpolations for spline interpolations of all degrees.","category":"page"},{"location":"about.html","page":"Introduction","title":"Introduction","text":"For an overview and speed comparison with Interpolations.jl, see Timings.","category":"page"},{"location":"timings.html#Timings","page":"Timing Comparisons","title":"Timings","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"Comparison of spline interpolation timings for SSpline and Interpolations.","category":"page"},{"location":"timings.html#Linear-Splines","page":"Timing Comparisons","title":"Linear Splines","text":"","category":"section"},{"location":"timings.html#SSpline-Linear","page":"Timing Comparisons","title":"SSpline Linear","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($ls,1:0.01:10000)\r\nBechmarkTools.Trial: 603 samples with 1 evaluations.\r\n Range (min … max):  5.702 ms … 24.966 ms  ┊ GC (min … max):  0.00% … 14.06%\r\n Time  (median):     7.470 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.283 ms ±  1.927 ms  ┊ GC (mean ± σ):  14.26% ± 16.15%\r\n\r\n        █▅\r\n  ▃▄▃▃▂▄███▆▆▆▅▄▄▃▄▃▃▃▃▃▃▃▃▂▄▇▇▅▆▆▅▃▄▂▃▃▃▃▂▃▂▃▁▃▂▂▃▂▁▂▂▂▁▁▂▂ ▃\r\n  5.7 ms         Histogram: frequency by time        13.8 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Interpolations-Linear","page":"Timing Comparisons","title":"Interpolations Linear","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":" julia> @benchmark interp_linear(1:0.01:10000)\r\nBechmarkTools.Trial: 386 samples with 1 evaluations.\r\n Range (min … max):   9.752 ms … 93.423 ms  ┊ GC (min … max): 0.00% … 87.16%\r\n Time  (median):     11.614 ms              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   12.933 ms ±  6.228 ms  ┊ GC (mean ± σ):  8.01% ± 10.91%\r\n\r\n   ▃█▅▅▃▃             ▁\r\n  ▅██████▇█▇▆▆▄▃▄▄▆▆▆▇█▇▆▅▄▃▂▃▄▄▃▁▂▃▂▄▃▁▂▁▂▁▃▁▁▁▂▃▂▃▁▁▁▂▁▁▁▁▂ ▃\r\n  9.75 ms         Histogram: frequency by time        22.4 ms <\r\n\r\n Memory estimate: 7.63 MiB, allocs estimate: 3.","category":"page"},{"location":"timings.html#Cubic-Comparison","page":"Timing Comparisons","title":"Cubic Comparison","text":"","category":"section"},{"location":"timings.html#SSpline-Cubic","page":"Timing Comparisons","title":"SSpline Cubic","text":"","category":"section"},{"location":"timings.html#Cubic-Natural-Int.","page":"Timing Comparisons","title":"Cubic Natural Int.","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($cn,1:0.01:10000)\r\nBechmarkTools.Trial: 556 samples with 1 evaluations.\r\n Range (min … max):  6.298 ms … 16.154 ms  ┊ GC (min … max):  0.00% … 30.59%\r\n Time  (median):     8.216 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.979 ms ±  1.846 ms  ┊ GC (mean ± σ):  13.11% ± 15.03%\r\n\r\n         ▇█▂▅▄                    ▁\r\n  ▂▅▅▅▅▄▅█████▆█▆▇▇▄▅▅▄▃▃▃▃▃▄▄▃▅▇██▇▅▇▄▆▄▆▄▃▄▂▃▄▂▃▂▃▁▂▂▂▃▂▁▂ ▄\r\n  6.3 ms         Histogram: frequency by time        13.9 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Cubic-Clamped-Int.","page":"Timing Comparisons","title":"Cubic Clamped Int.","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($cc,1:0.01:10000)\r\nBechmarkTools.Trial: 543 samples with 1 evaluations.\r\n Range (min … max):  6.590 ms … 15.971 ms  ┊ GC (min … max):  0.00% … 29.67%\r\n Time  (median):     8.352 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   9.185 ms ±  1.901 ms  ┊ GC (mean ± σ):  13.01% ± 15.01%\r\n\r\n      ▄▆█▄ ▃▂              ▁\r\n  ▅▄▃▃████▆██▅▄▆▆▄▃▃▃▃▃▃▁▅▇██▆▆▅▇▆▃▄▃▄▃▁▃▂▃▂▂▃▁▂▂▁▂▂▁▂▂▂▂▁▁▃ ▃\r\n  6.59 ms        Histogram: frequency by time        15.4 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Interpolations.jl-Cubic-Interpolation","page":"Timing Comparisons","title":"Interpolations.jl Cubic Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":" julia> @benchmark cubic_interpolation(1:0.01:10000)\r\nBechmarkTools.Trial: 217 samples with 1 evaluations.\r\n Range (min … max):  17.319 ms … 119.705 ms  ┊ GC (min … max): 0.00% … 75.90%\r\n Time  (median):     21.523 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   23.141 ms ±   9.066 ms  ┊ GC (mean ± σ):  6.09% ±  9.56%\r\n\r\n   ▇█▇\r\n  ▆█████▆▆▆▆▆▆█▆▆▅█▆▆▆▄▆▅▄▅▆▅▆▁▅▅▁▃▃▁▃▃▁▃▃▃▃▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▃ ▃\r\n  17.3 ms         Histogram: frequency by time         40.1 ms <\r\n\r\n Memory estimate: 7.63 MiB, allocs estimate: 3.","category":"page"},{"location":"timings.html#SSpline-Interpolation-timings","page":"Timing Comparisons","title":"SSpline Interpolation timings","text":"","category":"section"},{"location":"timings.html#Nearest-Neighbor-Interpolation","page":"Timing Comparisons","title":"Nearest Neighbor Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($nn,1:0.01:10000)\r\nBechmarkTools.Trial: 617 samples with 1 evaluations.\r\n Range (min … max):  5.733 ms … 13.798 ms  ┊ GC (min … max):  0.00% … 31.52%\r\n Time  (median):     7.254 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.087 ms ±  1.706 ms  ┊ GC (mean ± σ):  14.29% ± 16.12%\r\n\r\n        █▅▂▂\r\n  ▅▄▃▃▃▂████▇▇▅▅▄▃▄▃▃▄▃▃▂▂▃▂▃▄▃▆▇▆▆▅▄▄▄▄▃▃▃▂▃▁▃▂▂▃▁▁▁▁▁▂▁▁▂▂ ▃\r\n  5.73 ms        Histogram: frequency by time        13.1 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Linear-Interpolation","page":"Timing Comparisons","title":"Linear Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($ls,1:0.01:10000)\r\nBechmarkTools.Trial: 603 samples with 1 evaluations.\r\n Range (min … max):  5.702 ms … 24.966 ms  ┊ GC (min … max):  0.00% … 14.06%\r\n Time  (median):     7.470 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.283 ms ±  1.927 ms  ┊ GC (mean ± σ):  14.26% ± 16.15%\r\n\r\n        █▅\r\n  ▃▄▃▃▂▄███▆▆▆▅▄▄▃▄▃▃▃▃▃▃▃▃▂▄▇▇▅▆▆▅▃▄▂▃▃▃▃▂▃▂▃▁▃▂▂▃▂▁▂▂▂▁▁▂▂ ▃\r\n  5.7 ms         Histogram: frequency by time        13.8 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Quadratic-Interpolation","page":"Timing Comparisons","title":"Quadratic Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($qs,1:0.01:10000)\r\nBechmarkTools.Trial: 572 samples with 1 evaluations.\r\n Range (min … max):  5.872 ms … 21.767 ms  ┊ GC (min … max):  0.00% … 29.79%\r\n Time  (median):     7.915 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.720 ms ±  1.973 ms  ┊ GC (mean ± σ):  13.77% ± 15.57%\r\n\r\n         ▄█▆▁\r\n  ▂▃▄▄▄▄▄████▆▇▇█▆▅▅▄▃▃▄▃▃▄▃▃▄▄▆█▇▅█▅▆▃▄▄▄▃▄▃▂▃▃▃▃▃▃▁▂▄▂▃▁▂▂ ▃\r\n  5.87 ms        Histogram: frequency by time        13.8 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Cubic-Natural-Interpolation","page":"Timing Comparisons","title":"Cubic Natural Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($cn,1:0.01:10000)\r\nBechmarkTools.Trial: 556 samples with 1 evaluations.\r\n Range (min … max):  6.298 ms … 16.154 ms  ┊ GC (min … max):  0.00% … 30.59%\r\n Time  (median):     8.216 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   8.979 ms ±  1.846 ms  ┊ GC (mean ± σ):  13.11% ± 15.03%\r\n\r\n         ▇█▂▅▄                    ▁\r\n  ▂▅▅▅▅▄▅█████▆█▆▇▇▄▅▅▄▃▃▃▃▃▄▄▃▅▇██▇▅▇▄▆▄▆▄▃▄▂▃▄▂▃▂▃▁▂▂▂▃▂▁▂ ▄\r\n  6.3 ms         Histogram: frequency by time        13.9 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Cubic-Clamped-Interpolation","page":"Timing Comparisons","title":"Cubic Clamped Interpolation","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($cc,1:0.01:10000)\r\nBechmarkTools.Trial: 543 samples with 1 evaluations.\r\n Range (min … max):  6.590 ms … 15.971 ms  ┊ GC (min … max):  0.00% … 29.67%\r\n Time  (median):     8.352 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   9.185 ms ±  1.901 ms  ┊ GC (mean ± σ):  13.01% ± 15.01%\r\n\r\n      ▄▆█▄ ▃▂              ▁\r\n  ▅▄▃▃████▆██▅▄▆▆▄▃▃▃▃▃▃▁▅▇██▆▆▅▇▆▃▄▃▄▃▁▃▂▃▂▂▃▁▂▂▁▂▂▁▂▂▂▂▁▁▃ ▃\r\n  6.59 ms        Histogram: frequency by time        15.4 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Hermite-Interpolation-(Kruger)","page":"Timing Comparisons","title":"Hermite Interpolation (Kruger)","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark interp($hs,1:0.01:10000)\r\nBechmarkTools.Trial: 452 samples with 1 evaluations.\r\n Range (min … max):   8.340 ms … 20.404 ms  ┊ GC (min … max):  0.00% … 26.73%\r\n Time  (median):     10.304 ms              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   11.041 ms ±  1.992 ms  ┊ GC (mean ± σ):  10.72% ± 12.68%\r\n\r\n   ▁   ▁█▃▅▇▃▂                 ▄\r\n  ▆█▄▃▃███████▇▇▅▇▅▅▃▄▆▄▃▂▄▄▄▅▇█▆▆▅▇▅▃▅▅▅▄▄▄▃▃▃▁▃▃▁▃▃▃▁▂▄▁▁▁▂ ▄\r\n  8.34 ms         Histogram: frequency by time        16.5 ms <\r\n\r\n Memory estimate: 15.26 MiB, allocs estimate: 4.","category":"page"},{"location":"timings.html#Spline-creation-timings","page":"Timing Comparisons","title":"Spline creation timings","text":"","category":"section"},{"location":"timings.html#SSpline-Cubic-Spline-Natural","page":"Timing Comparisons","title":"SSpline Cubic Spline Natural","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark  cs = cspline($collect(xs),$A,:natural)\r\nBechmarkTools.Trial: 9047 samples with 1 evaluations.\r\n Range (min … max):  399.800 μs …   5.841 ms  ┊ GC (min … max): 0.00% … 84.61%\r\n Time  (median):     463.100 μs               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   546.430 μs ± 287.835 μs  ┊ GC (mean ± σ):  9.18% ± 13.78%\r\n\r\n  ▃▆█▆▅▄▃▃▃▂▂▁▁    ▁                                  ▁         ▂\r\n  ███████████████████▇▇▆▆▆▅▆▅▆▄▅▅▅▄▅▄▄▄▃▃▄▁▁▁▃▃▁▁▁▁▅████▇▇▇▆▅▆▆ █\r\n  400 μs        Histogram: log(frequency) by time       1.83 ms <\r\n\r\n Memory estimate: 1.68 MiB, allocs estimate: 55.","category":"page"},{"location":"timings.html#Interpolations.jl-Cubic-Spline","page":"Timing Comparisons","title":"Interpolations.jl Cubic Spline","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark CubicSplineInterpolation($xs,$A)\r\nBechmarkTools.Trial: 1999 samples with 1 evaluations.\r\n Range (min … max):  2.136 ms …   6.510 ms  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     2.293 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   2.490 ms ± 444.638 μs  ┊ GC (mean ± σ):  0.92% ± 4.29%\r\n\r\n   ▃▆█▆▅▄▄▂▂▂▂▁ ▁▁\r\n  ▅█████████████████████▇▇█▅▇███▇▇▇▇▆▆▅▆▆▆▆▇▃▅▅▃▅▆▄▄▅▄▄▅▆▃▄▄▄ █\r\n  2.14 ms      Histogram: log(frequency) by time      4.15 ms <\r\n\r\n Memory estimate: 1.06 MiB, allocs estimate: 124.","category":"page"},{"location":"timings.html#SSpline-Hermite-Spline-(Kruger)","page":"Timing Comparisons","title":"SSpline Hermite Spline (Kruger)","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark  hs = hspline(collect(xs),A,:kruger)\r\nBechmarkTools.Trial: 10000 samples with 1 evaluations.\r\n Range (min … max):   67.000 μs …   5.022 ms  ┊ GC (min … max):  0.00% … 97.74%\r\n Time  (median):      82.500 μs               ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   100.612 μs ± 129.914 μs  ┊ GC (mean ± σ):  10.82% ±  8.51%\r\n\r\n  ▁▄▆█▇▆▅▄▃▂▂▁▁▁                                                ▂\r\n  ██████████████████▇▇██████▇▇▇▆▆▇▆▇▆▅▆▆▆▆▆▅▆▆▃▅▅▃▅▅▄▄▄▁▃▃▃▁▁▃▄ █\r\n  67 μs         Histogram: log(frequency) by time        303 μs <\r\n\r\n Memory estimate: 391.05 KiB, allocs estimate: 11.","category":"page"},{"location":"timings.html#SSpline-Quadratic-Spline","page":"Timing Comparisons","title":"SSpline Quadratic Spline","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark  qs = qspline(collect(xs),A)\r\nBechmarkTools.Trial: 10000 samples with 1 evaluations.\r\n Range (min … max):   67.800 μs …   4.097 ms  ┊ GC (min … max):  0.00% … 97.38%\r\n Time  (median):      88.400 μs               ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   113.054 μs ± 148.473 μs  ┊ GC (mean ± σ):  13.46% ± 10.02%\r\n\r\n  ██▅▃▂▁▂▂                                                      ▂\r\n  █████████▇▇▇▇▆▅▄▅▃▄▄▄▃▃▃▁▁▁▄▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▇ █\r\n  67.8 μs       Histogram: log(frequency) by time       1.24 ms <\r\n\r\n Memory estimate: 547.47 KiB, allocs estimate: 15.","category":"page"},{"location":"timings.html#SSpline-Linear-Spline","page":"Timing Comparisons","title":"SSpline Linear Spline","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark  ls = lspline(collect(xs),A)\r\nBechmarkTools.Trial: 10000 samples with 1 evaluations.\r\n Range (min … max):  31.600 μs …   3.660 ms  ┊ GC (min … max):  0.00% … 98.25%\r\n Time  (median):     43.900 μs               ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   57.529 μs ± 110.165 μs  ┊ GC (mean ± σ):  15.02% ±  7.82%\r\n\r\n  ▂▃▅▆▇█▆▅▅▄▄▃▃▂▁▁▁                 ▂▁                         ▂\r\n  █████████████████████▇▇▇▅▅▆▅▅▄▅▅▇███▇▇▅▆▆▅▆▆▅▆▅▆▅▄▄▄▄▅▃▄▄▅▁▄ █\r\n  31.6 μs       Histogram: log(frequency) by time       167 μs <\r\n\r\n Memory estimate: 312.84 KiB, allocs estimate: 9.","category":"page"},{"location":"timings.html#SSpline-Nearest-Neighbor-Spline","page":"Timing Comparisons","title":"SSpline Nearest Neighbor Spline","text":"","category":"section"},{"location":"timings.html","page":"Timing Comparisons","title":"Timing Comparisons","text":"julia> @benchmark  ns = nnspline(collect(xs),A)\r\nBechmarkTools.Trial: 10000 samples with 1 evaluations.\r\n Range (min … max):  12.500 μs …  1.522 ms  ┊ GC (min … max):  0.00% … 96.75%\r\n Time  (median):     18.000 μs              ┊ GC (median):     0.00%\r\n Time  (mean ± σ):   23.248 μs ± 70.624 μs  ┊ GC (mean ± σ):  17.53% ±  5.72%\r\n\r\n   ▂▃▄▅▆▇█▆▅▄▄▃▂▃▂▂▁▁▁                                        ▂\r\n  ▇█████████████████████▇█▇▇▆▆▇▆▆▅▅▆▅▃▅▅▆▃▅▄▃▃▃▄▅▁▁▃▄▄▄▃▃▃▃▄▅ █\r\n  12.5 μs      Histogram: log(frequency) by time      56.3 μs <\r\n\r\n Memory estimate: 156.44 KiB, allocs estimate: 5.","category":"page"},{"location":"construction.html#Construction","page":"Construction","title":"Construction","text":"","category":"section"},{"location":"construction.html#Spline-Functions","page":"Construction","title":"Spline Functions","text":"","category":"section"},{"location":"construction.html","page":"Construction","title":"Construction","text":"All available spline construction functions.","category":"page"},{"location":"construction.html","page":"Construction","title":"Construction","text":"Given a pair of Vectors x and y, construct splines like follows:","category":"page"},{"location":"construction.html#Nearest-Neighbor-Splines","page":"Construction","title":"Nearest Neighbor Splines","text":"","category":"section"},{"location":"construction.html","page":"Construction","title":"Construction","text":"nearestneighbor","category":"page"},{"location":"construction.html#SSpline.nearestneighbor","page":"Construction","title":"SSpline.nearestneighbor","text":"nearestneighbor(x::Vector, y::Vector)\n\nNearest neighbor interpolation with the spline values in the center of intervals.\n\naliases: spline0, stepspline\n\n\n\n\n\n","category":"function"},{"location":"construction.html#Linear-Splines","page":"Construction","title":"Linear Splines","text":"","category":"section"},{"location":"construction.html","page":"Construction","title":"Construction","text":"linearspline","category":"page"},{"location":"construction.html#SSpline.linearspline","page":"Construction","title":"SSpline.linearspline","text":"linearspline(x::Vector, y::Vector)\n\nLinear spline interpolation.\n\naliases: spline1, lspline\n\n\n\n\n\n","category":"function"},{"location":"construction.html#Quadratic-Splines","page":"Construction","title":"Quadratic Splines","text":"","category":"section"},{"location":"construction.html","page":"Construction","title":"Construction","text":"quadraticspline","category":"page"},{"location":"construction.html#SSpline.quadraticspline","page":"Construction","title":"SSpline.quadraticspline","text":"quadraticspline(x::Vector, y::Vector, b1 = 0.0)\n\nQuadratic spline interpolation.\n\naliases: spline2, qspline\n\nOptional argument b1 sets the 1st derivative at the first knot. Default value = 0.0.\n\n\n\n\n\n","category":"function"},{"location":"construction.html#Cubic-Splines","page":"Construction","title":"Cubic Splines","text":"","category":"section"},{"location":"construction.html","page":"Construction","title":"Construction","text":"Hermite splines, defective cubic splines:","category":"page"},{"location":"construction.html","page":"Construction","title":"Construction","text":"hermitespline","category":"page"},{"location":"construction.html#SSpline.hermitespline","page":"Construction","title":"SSpline.hermitespline","text":"hermitespline(x::Vector, y::Vector, style::Symbol = :kruger, args...)\n\nCreates cubic hermite interpolation spline with defined 1st derivatives at all knots.\n\nAllowed styles:\n\n:kruger: Default value. Defines 1st derivatives using harmonic means to prevent overshoot at extremal knots.\n:free: Simple mean values for 1st derivatives.\n:predef: user defined 1st derivatives at all knots.\n\n\n\n\n\nhermitespline(x::Vector, y::Vector, d::Vector) = hermitespline(x, y, :predef, d)\n\nEquivalent to hermitespline(x, y, :predef, d)\n\n\n\n\n\n","category":"function"},{"location":"construction.html","page":"Construction","title":"Construction","text":"Cubic splines:","category":"page"},{"location":"construction.html","page":"Construction","title":"Construction","text":"cubicspline","category":"page"},{"location":"construction.html#SSpline.cubicspline","page":"Construction","title":"SSpline.cubicspline","text":"cubicspline(x::Vector, y::Vector, style...)\n\nalias: spline3, cspline\n\nCreates a cubic spline. Boundary conditions are defined by style.\n\nstyle...: settings for boundary conditions.\n\n:natural: zero curvature at the start and end points of the spline.\naliases: cubicspline(x, y), naturalspline(x, y)\n:clamped, ds, de: predefined 1st derivative of start (ds) and end points (de).\nalias: clampedspline(x, y, ds, de)\n:periodic: periodic boundary conditions. y values at start and end points have to be equal,\n\nconditions at start and end points are identical.     - alias: periodicspline(x, y)\n\n:parabolic, :notaknot: parabolic runout spline, also known as not-a-knot spline\n:cubic: cubic runout spline\n:constrained: constrained cubic spline, see Kruger’s paper\n:hermite: hermite spline\n:kruger: constrained cubic spline, see Kruger’s paper. No overshooting.\n:free: hermite spline with free derivative conditions. No overshooting.\n:predef: predefined derivatives at knots\n\nExamples:\n\njulia> x=[0,1,2,3,4]; y=[-1,1,5,2,-3]; spline3(x,y,:natural)\nCubicSpline([1.0, -3.0, 2.0, 0.0], [0.0, 3.0, -6.0, 0.0], [1.0, 4.0, 1.0, -5.0], [-1.0, 1.0, 5.0, 2.0])\n\n\n\n\n\ncubicspline(x, y)\n\nFall back function, setting the default boundary condition to :natural\n\nalias: naturalspline\n\n\n\n\n\n","category":"function"},{"location":"construction.html","page":"Construction","title":"Construction","text":"naturalspline","category":"page"},{"location":"construction.html#SSpline.naturalspline","page":"Construction","title":"SSpline.naturalspline","text":"naturalspline(x::Vector, y::Vector)\n\nEquivalent to cubicspline(x::Vector, y::Vector, :natural).\n\n\n\n\n\n","category":"function"},{"location":"construction.html","page":"Construction","title":"Construction","text":"clampedspline","category":"page"},{"location":"construction.html#SSpline.clampedspline","page":"Construction","title":"SSpline.clampedspline","text":"clampedspline(x::Vector, y::Vector, ds = 0.0, de = 0.0)\n\nEquivalent to cubicspline(x::Vector, y::Vector, ds, de).\n\nReturns a clamped cubic spline.\n\nDefault arguments: 1st and last derivatives = 0.0\n\n\n\n\n\n","category":"function"},{"location":"construction.html","page":"Construction","title":"Construction","text":"periodicspline","category":"page"},{"location":"construction.html#SSpline.periodicspline","page":"Construction","title":"SSpline.periodicspline","text":"periodicspline(x::Vector, y::Vector)\n\nEquivalent to cubicspline(x::Vector, y::Vector, :periodic).\n\ny values of start and end points have to be equal.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SSpline.jl-Documentation","page":"Index","title":"SSpline.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#About","page":"Index","title":"About","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"This package (SSpline = short for SpectralSpline) provides a collection of methods specifically tailored to deal with spectral calculations. It provides functions and methods for the creation of univariate splines of different degrees and types and various interpolation and extrapolation methods.","category":"page"},{"location":"index.html#Functions","page":"Index","title":"Functions","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [SSpline]\r\nOrder   = [:function, :type]","category":"page"},{"location":"index.html#SSpline.Mbound-Tuple{Any, Vararg{Any, N} where N}","page":"Index","title":"SSpline.Mbound","text":"Mbound(M,style...)\n\nReturns vector M (moments) according to boundary conditions defined by style...\n\nHelper function for cubicspline.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.clampedspline","page":"Index","title":"SSpline.clampedspline","text":"clampedspline(x::Vector, y::Vector, ds = 0.0, de = 0.0)\n\nEquivalent to cubicspline(x::Vector, y::Vector, ds, de).\n\nReturns a clamped cubic spline.\n\nDefault arguments: 1st and last derivatives = 0.0\n\n\n\n\n\n","category":"function"},{"location":"index.html#SSpline.cubicspline-Tuple{Any, Any}","page":"Index","title":"SSpline.cubicspline","text":"cubicspline(x, y)\n\nFall back function, setting the default boundary condition to :natural\n\nalias: naturalspline\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.cubicspline-Tuple{Vector{T} where T, Vector{T} where T, Vararg{Any, N} where N}","page":"Index","title":"SSpline.cubicspline","text":"cubicspline(x::Vector, y::Vector, style...)\n\nalias: spline3, cspline\n\nCreates a cubic spline. Boundary conditions are defined by style.\n\nstyle...: settings for boundary conditions.\n\n:natural: zero curvature at the start and end points of the spline.\naliases: cubicspline(x, y), naturalspline(x, y)\n:clamped, ds, de: predefined 1st derivative of start (ds) and end points (de).\nalias: clampedspline(x, y, ds, de)\n:periodic: periodic boundary conditions. y values at start and end points have to be equal,\n\nconditions at start and end points are identical.     - alias: periodicspline(x, y)\n\n:parabolic, :notaknot: parabolic runout spline, also known as not-a-knot spline\n:cubic: cubic runout spline\n:constrained: constrained cubic spline, see Kruger’s paper\n:hermite: hermite spline\n:kruger: constrained cubic spline, see Kruger’s paper. No overshooting.\n:free: hermite spline with free derivative conditions. No overshooting.\n:predef: predefined derivatives at knots\n\nExamples:\n\njulia> x=[0,1,2,3,4]; y=[-1,1,5,2,-3]; spline3(x,y,:natural)\nCubicSpline([1.0, -3.0, 2.0, 0.0], [0.0, 3.0, -6.0, 0.0], [1.0, 4.0, 1.0, -5.0], [-1.0, 1.0, 5.0, 2.0])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.curvature-Tuple{SSpline.Spline, Any}","page":"Index","title":"SSpline.curvature","text":"curvature(spl::Spline,dλ)\n\nReturns the 2nd derivative of the spline function (s'')\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.curvrate-Tuple{SSpline.Spline, Any}","page":"Index","title":"SSpline.curvrate","text":"curvrate(spl::Spline,dλ)\n\nReturns the 3rd derivative of the spline function (s''').\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.extrapolate","page":"Index","title":"SSpline.extrapolate","text":"extrapolate(spl, env = SpectralVis.SPECENV)\n\nExtrapolate spline according to spectral environment.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SSpline.extrapolate-Tuple{Any, Any, Symbol}","page":"Index","title":"SSpline.extrapolate","text":"extrapolate(spl, xrange, extr::Symbol)\n\nExtrapolate a spline to the limits given by xrange, using the extrapolation type extr.\n\nalias: extrap\n\nAllowed modes for extr:\n\n:zero\n:boundary\n:linear\n:quadratic\n:smooth (smooth blending to zero for Hermite splines)\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.hermitespline","page":"Index","title":"SSpline.hermitespline","text":"hermitespline(x::Vector, y::Vector, style::Symbol = :kruger, args...)\n\nCreates cubic hermite interpolation spline with defined 1st derivatives at all knots.\n\nAllowed styles:\n\n:kruger: Default value. Defines 1st derivatives using harmonic means to prevent overshoot at extremal knots.\n:free: Simple mean values for 1st derivatives.\n:predef: user defined 1st derivatives at all knots.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SSpline.hermitespline-Tuple{Vector{T} where T, Vector{T} where T, Vector{T} where T}","page":"Index","title":"SSpline.hermitespline","text":"hermitespline(x::Vector, y::Vector, d::Vector) = hermitespline(x, y, :predef, d)\n\nEquivalent to hermitespline(x, y, :predef, d)\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.interpolate-Tuple{CubicSpline, Any}","page":"Index","title":"SSpline.interpolate","text":"interp(spl::CubicSpline, xrange)\n\nReturns tuple of vectors of spline values s at locations xs, as defined by the grid points at x+n*dλ (smoothed curve).\n\nExamples:\n\nfor x=[0,10,30,50,70,90,100] and y=[30,130,150,150,170,220,320]\n\njulia> cs = spline3(x,y,:natural)\nCubicSpline([-0.015813397129186602, 0.009126794258373205, -0.0006937799043062205, -0.0013516746411483252, 0.007350478468899521, -0.01305023923444976], [0.0, -0.4744019138755981, 0.07320574162679427, 0.03157894736842105, -0.049521531100478466, 0.3915071770334928], [11.58133971291866, 6.83732057416268, -1.1866028708133973, 0.9090909090909092, 0.5502392344497609, 7.389952153110048], [30.0, 130.0, 150.0, 150.0, 170.0, 220.0], [0.0, 10.0, 30.0, 50.0, 70.0, 90.0, 100.0])\n\njulia> interp(cs, 30.0:0.2:320.0)\n([30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8  …  318.2, 318.4, 318.6, 318.8, 319.0, 319.2, 319.4, 319.6, 319.8, 320.0], [150.00000000000003, 149.76560210526316, 149.53702736842106, 149.31424248803827, 149.09721416267942, 148.88590909090908, 148.68029397129186, 148.48033550239234, 148.28600038277511, 148.09725531100477  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.interpolate-Tuple{HermiteSpline, Any}","page":"Index","title":"SSpline.interpolate","text":"interpolate(spl::HermiteSpline, xrange)\n\nCreate interpolated vectors based on a Hermite spline\n\nExamples:\n\nfor x=[0,10,30,50,70,90,100] and y=[30,130,150,150,170,220,320]\n\njulia> hs = hermitespline(x,y,:kruger)\nHermiteSpline([14.909090909090908, 0.18181818181818182, 0.0, 0.0, 0.5714285714285714, 0.16, 14.92], [30.0, 130.0, 150.0, 150.0, 170.0, 220.0, 320.0], [0.0, 10.0, 30.0, 50.0, 70.0, 90.0, 100.0])\n\njulia> interp(hs, 30.0:0.2:320.0)\n([30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8  …  318.2, 318.4, 318.6, 318.8, 319.0, 319.2, 319.4, 319.6, 319.8, 320.0], [150.0, 150.0, 150.00000000000003, 149.99999999999997, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.interpolate-Tuple{LinearSpline, Any}","page":"Index","title":"SSpline.interpolate","text":"interpolate(spl::LinearSpline, xrange)\n\nCreate interpolated vectors based on a linear spline\n\nExamples:\n\nfor x=[0,10,30,50,70,90,100] and y=[30,130,150,150,170,220,320]\n\njulia> ls = spline1(x,y)\nLinearSpline([10.0, 1.0, 0.0, 1.0, 2.5, 10.0], [30.0, 130.0, 150.0, 150.0, 170.0, 220.0], [0.0, 10.0, 30.0, 50.0, 70.0, 90.0, 100.0])\n\njulia> interp(ls, 30.0:0.2:320.0)\n([30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8  …  318.2, 318.4, 318.6, 318.8, 319.0, 319.2, 319.4, 319.6, 319.8, 320.0], [150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.interpolate-Tuple{NearestNeighborSpline, Any}","page":"Index","title":"SSpline.interpolate","text":"interpolate(spl::NearestNeighborSpline, xrange)\n\nCreate interpolated vectors based on a nearest neighbor spline.\n\nExamples:\n\nfor x=[0,10,30,50,70,90,100] and y=[30,130,150,150,170,220,320]\n\njulia> nns = spline0(x,y)\nNearestNeighborSpline([30.0, 130.0, 150.0, 150.0, 170.0, 220.0, 320.0], [0.0, 10.0, 30.0, 50.0, 70.0, 90.0, 100.0])\n\njulia> interp(nns, 30.0:0.2:320.0)\n([30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8  …  318.2, 318.4, 318.6, 318.8, 319.0, 319.2, 319.4, 319.6, 319.8, 320.0], [150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.interpolate-Tuple{QuadraticSpline, Any}","page":"Index","title":"SSpline.interpolate","text":"interpolate(spl::QuadraticSpline, xrange)\n\nCreate interpolated vectors based on a quadratic spline\n\nExamples:\n\nfor x=[0,10,30,50,70,90,100] and y=[30,130,150,150,170,220,320]\n\njulia> qs = spline2(x,y)\nQuadraticSpline([1.0, -0.95, 0.9, -0.85, 0.925, -1.1, 0.0], [0.0, 20.0, -18.0, 18.0, -16.0, 21.0, -1.0], [30.0, 130.0, 150.0, 150.0, 170.0, 220.0, 0.0], [0.0, 10.0, 30.0, 50.0, 70.0, 90.0, 100.0])\n\njulia> interp(qs, 30.0:0.2:320.0)\n([30.0, 30.2, 30.4, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.8  …  318.2, 318.4, 318.6, 318.8, 319.0, 319.2, 319.4, 319.6, 319.8, 320.0], [150.0, 146.436, 142.94400000000002, 139.52399999999997, 136.176, 132.9, 129.69600000000003, 126.56400000000002, 123.50399999999998, 120.51599999999999  …  2.2006465129835e-310, 2.2034094153224e-310, 2.2061740509752e-310, 2.20894041994186e-310, 2.2117085222224e-310, 2.21447835781683e-310, 2.2172499267252e-310, 2.2200232289474e-310, 2.22279826448355e-310, 2.22557503333353e-310])\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.linearspline-Tuple{Vector{T} where T, Vector{T} where T}","page":"Index","title":"SSpline.linearspline","text":"linearspline(x::Vector, y::Vector)\n\nLinear spline interpolation.\n\naliases: spline1, lspline\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.naturalspline-Tuple{Vector{T} where T, Vector{T} where T}","page":"Index","title":"SSpline.naturalspline","text":"naturalspline(x::Vector, y::Vector)\n\nEquivalent to cubicspline(x::Vector, y::Vector, :natural).\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.nearestneighbor-Tuple{Vector{T} where T, Vector{T} where T}","page":"Index","title":"SSpline.nearestneighbor","text":"nearestneighbor(x::Vector, y::Vector)\n\nNearest neighbor interpolation with the spline values in the center of intervals.\n\naliases: spline0, stepspline\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.periodicspline-Tuple{Vector{T} where T, Vector{T} where T}","page":"Index","title":"SSpline.periodicspline","text":"periodicspline(x::Vector, y::Vector)\n\nEquivalent to cubicspline(x::Vector, y::Vector, :periodic).\n\ny values of start and end points have to be equal.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.quadraticspline","page":"Index","title":"SSpline.quadraticspline","text":"quadraticspline(x::Vector, y::Vector, b1 = 0.0)\n\nQuadratic spline interpolation.\n\naliases: spline2, qspline\n\nOptional argument b1 sets the 1st derivative at the first knot. Default value = 0.0.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SSpline.rbound-Tuple{Any, Any, Any, Any, Vararg{Any, N} where N}","page":"Index","title":"SSpline.rbound","text":"rbound(r,Δx,Δy,style...)\n\nReturns vector r according to boundary conditions defined by style... Helper function for cubicspline.\n\nReturns: r\n\n\n\n\n\n","category":"method"},{"location":"index.html#SSpline.slope-Tuple{SSpline.Spline, Any}","page":"Index","title":"SSpline.slope","text":"slope(spl::Spline,dλ)\n\nReturns the pair of λ, s' (1st derivative of the spline function).\n\n\n\n\n\n","category":"method"},{"location":"index.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"documentation.html#SpectralVis.jl-Documentation","page":"Documentation","title":"SpectralVis.jl Documentation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation","title":"Documentation","text":"","category":"page"}]
}
